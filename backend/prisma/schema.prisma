// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  user
  admin
  assistant
}

model User {
  id              String    @id @default(uuid())
  nickName        String    @unique
  name            String?
  lastName        String?
  email           String?   @unique
  phoneNumber     String?   @unique
  password        String
  role            Role      @default(user)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime? @updatedAt
  profilePic      String?
  posts           Post[]
  isPremium       Boolean   @default(false)
  birthday        DateTime?
  bio             String?
  following       User[]    @relation("UserToUser")
  followers       User[]    @relation("UserToUser")
  isClosedAccount Boolean   @default(false)
  isBanned        Boolean   @default(false)
  isVerified      Boolean   @default(false)
  isOnline        Boolean   @default(false)
  lastSeen        DateTime?
  Like            Like[]
  Comment         Comment[]

  @@map("users")
}

model Post {
  id         String    @id @default(uuid())
  userId     String
  User       User      @relation(fields: [userId], references: [id])
  caption    String?
  imageSrc   String?
  likes      Like[]
  views      Int       @default(0)
  createdAt  DateTime  @default(now())
  isStory    Boolean   @default(false)
  comments   Comment[]
  isArchived Boolean   @default(false)

  @@map("posts")
}

model Comment {
  id        String   @id @default(uuid())
  userId    String
  postId    String
  User      User     @relation(fields: [userId], references: [id])
  Post      Post     @relation(fields: [postId], references: [id])
  content   String
  createdAt DateTime @default(now())

  @@map("comments")
}

model Like {
  id     String @id @default(uuid())
  userId String
  postId String
  User   User   @relation(fields: [userId], references: [id])
  Post   Post   @relation(fields: [postId], references: [id])

  @@map("likes")
}
